import numpy as np
import sys
p0 = int(sys.argv[1])
p1 = p0+1
options=[[2,3,4]]
trainset = range(25)
string = 'ar170_6_12_Trainset/'
rel = np.load('315_filtered.npy')
string = 'VAR_order' + str(p0) + '_fold/'

folding=np.load('10_10fold.npy')
nrep=np.shape(folding)[0]
nfoldings=np.shape(folding)[1]
txfolding=np.shape(folding)[2]
nstates=5

# DEFINE FUNCTIONS---------------------------------------------------------------------
def capZt2(vslice,p,t,y, trial, state):
    if t==0:
        Zt = np.insert(y[trial][state][t+p-1::-1,vslice],0,1)
    else:
        Zt = np.insert(y[trial][state][t+p-1:t-1:-1,vslice],0,1)
    return Zt.flatten('F')

#----------------------------
def capZ2(vslice,p,T,y, trial, state):
    Z = capZt2(vslice,p, 0,y, trial[0],state)

    for j in trial:
        if j == trial[0]:
            for i in range(1,T-p):
                Z = np.vstack((Z,capZt2(vslice,p, i,y, j,state)))
        else:
            for i in range(0,T-p):
                Z = np.vstack((Z,capZt2(vslice,p, i,y, j,state)))
    return Z
#----------------------------
def capYn2(vslice,p,T,y, trial, state):
    Y = y[trial][state][p:T,vslice]
    return Y.transpose()
#---------------------------
def capY2(vslice,p,T,y, vtrials, state):
    Y = capYn2(vslice,p, T,y, vtrials[0],state)
    for j in range(1,np.size(vtrials)):
        Y = np.hstack((Y,capYn2(vslice,p, T,y, vtrials[j],state)))
    return Y.transpose()
#--------------------------
def hatbetaN(vslice,p,T,y, vtrials,state):
    return np.linalg.lstsq(capZ2(vslice,p,T,y,vtrials,state), capY2(vslice,p,T,y, vtrials, state),rcond=1e-15)[0].transpose()   
#---------------------------
def VAR_coefN(vslice,p,T,y,vtrials,state):
    beta2 = hatbetaN(vslice,p,T, y,vtrials,state)
    beta = beta2.flatten('F')
    k = np.size(vslice)
    mu = beta[0:k].flatten()
    beta = np.reshape(beta, (np.size(beta),1))
    for j in range(p):
        A = np.reshape(beta[k+k*k*j:k+k*k*(j+1)].reshape(1,-1),(k,k))
        if j == 0:
            Ap = [A]
        else:
            Ap = np.concatenate((Ap,[A]), axis = 0)
    return beta2, mu,np.array(Ap)
#-----------------------------
def hatbetaN2(Z,Y):
    return np.linalg.lstsq(Z, Y,rcond=1e-15)[0].transpose()
#-----------------------------
def VAR_coefN2(vslice,p,T,y,vtrials,state,Z,Y):
    beta2 = hatbetaN2(Z,Y)
    beta = beta2.flatten('F')
    k = np.size(vslice)
    mu = beta[0:k].flatten()
    beta = np.reshape(beta, (np.size(beta),1))
    for j in range(p):
        A = np.reshape(beta[k+k*k*j:k+k*k*(j+1)].reshape(1,-1),(k,k))
        if j == 0:
            Ap = [A]
        else:
            Ap = np.concatenate((Ap,[A]), axis = 0)
    return beta2, mu,np.array(Ap)
#----------------------------
def tildeS(T2,Y,B,Z):
    aux = Y-np.matmul(B,Z)
    return (1/T2)*np.matmul(aux, aux.transpose())
#-----------------------------
def logL(vslice, p, T,y, vtrials, state, Y,B, Z, hS):
    N = np.size(vtrials)
    K = np.size(vslice)
    Sinv = np.linalg.inv(hS)
    T -=p
    return -K*N*T/2*np.log(2*np.pi)+N*T/2*np.log(np.linalg.det(Sinv))-(1/2)*T*N*K
#---------------------------
def BIC(k,n,L):
    return k*np.log(n)-2*L
#-----------------------------
def myrange(n, exclude):
    return np.arange(n)[np.r_[0:exclude, exclude+1:n]]
#-----------------------------
def myrange2(v, exclude):
    return v[np.r_[0:exclude, exclude+1:np.size(v)]]
#--------------------------
def get_kth_fold(data, N, k):
    # Calcula la mida de cada fold
    fold_size = len(data) // N
    
    # Assegura que k està dins del rang vàlid
    if k < 0 or k >= N:
        raise ValueError("El valor de k ha d'estar entre 0 i N-1")

    # Calcula els índexs d'inici i final del k-èssim fold
    start = k * fold_size
    end = start + fold_size

    # Retorna el k-èssim fold
    kth_fold = data[start:end]
    
    return kth_fold
#-------------------------------

def exclude_kth_fold(data, N, k):
    # Calcula la mida de cada fold
    fold_size = len(data) // N
    
    # Assegura que k està dins del rang vàlid
    if k < 0 or k >= N:
        raise ValueError("El valor de k ha d'estar entre 0 i N-1")

    # Calcula els índexs d'inici i final del k-èssim fold
    start = k * fold_size
    end = start + fold_size

    # Retorna els elements fora del k-èssim fold
    remaining_data = np.concatenate((data[:start], data[end:]))
    
    return remaining_data
#-------------------------------------


#----------------Training FT--------------------

for channels in options:
    for order in range(p0, p1):
        for rep in range(nrep):
            for fold in range(nfoldings):
                print(rep)
                print(fold)
                for mtrial in range(txfolding):
                    for state in range(nstates):
                        vtrials = np.array(myrange2(folding[rep, fold, :], mtrial)).astype(int)  # Which trials do you want to use in your regression?
                        T = np.shape(rel)[2]  # How many time-points are in a single channel in a given trial and state
                        Y = capY2(channels, order, T, rel, vtrials, state).transpose()
                        Z = capZ2(channels, order, T, rel, vtrials, state).transpose()
                        B, nu, Ap = VAR_coefN2(channels, order, T, rel, vtrials, state, Z.transpose(), Y.transpose())  # mu is the mean, Ap is the set of matrix of VAR(k,p)
                        hS = tildeS(np.size(vtrials) * (T - order), Y, B, Z)
                        np.save(string + 'B_order' + str(order) + 'rep' + str(rep) + 'fold' + str(fold) + 'mtrial' + str(mtrial) + 'state' + str(state) +'.npy', B)      
                        L = logL(channels, order, T, rel, vtrials, state, Y, B, Z, hS)
                        np.save(string + 'L_order' + str(order) + 'rep' + str(rep) + 'fold' + str(fold) + 'mtrial' + str(mtrial) + 'state' + str(state) +'.npy', L)

import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay


def stringtrain(order,rep,fold,mtrial,state):
    return string + 'B_order' + str(order) + 'rep' + str(rep) + 'fold' + str(fold) + 'mtrial' + str(mtrial) + 'state' + str(state) + '.npy'

ntests = nrep*nfoldings
accuracy = np.zeros((p1-p0,ntests))
precision = np.zeros((p1-p0,ntests))
for channels in options:
    for order in range(p0, p1):
        for rep in range(nrep):
            for fold in range(nfoldings):
                for mtrial in range(txfolding):
                    for state in range(nstates):
                        nameM = stringtrain(order, rep, fold, mtrial, state)
                        if rep == 0 and fold == 0 and mtrial == 0 and state == 0:
                            M_ar = np.load(nameM).flatten()
                            label_ar = [state]
                        else:
                            M_ar = np.vstack((M_ar, np.load(nameM).flatten()))
                            label_ar.append(state)
label_ar = np.array(label_ar)
import numpy as np
import sys
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay


def stringtrain(order,rep,fold,mtrial,state):
    return string + 'B_order' + str(order) + 'rep' + str(rep) + 'fold' + str(fold) + 'mtrial' + str(mtrial) + 'state' + str(state) + '.npy'

ntests = nrep*nfoldings
accuracy = np.zeros((p1-p0,ntests))
precision = np.zeros((p1-p0,ntests))

#-----------------------

cm = []
cm2 =[]
Nel =1
k=0
SMALL_SIZE = 16
MEDIUM_SIZE = 20
BIGGER_SIZE = 25
plt.rc('font', size=SMALL_SIZE)         # controls default text sizes
plt.rc('axes', titlesize=BIGGER_SIZE)    # fontsize of the axes title
plt.rc('axes', labelsize=SMALL_SIZE)     # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=MEDIUM_SIZE)  #  titol de veritat


#-------------------------------------
c = 1
tipus = 'l2'
labels=[]
ntests = nrep*nfoldings
accuracy = np.zeros((p1-p0,ntests))
precision = np.zeros((p1-p0,ntests))
for channels in options:
    for order in range(p0, p1):
        for rep in range(nrep):
            for fold in range(nfoldings):
                for mtrial in range(txfolding):
                    for state in range(nstates):
                        nameM = stringtrain(order, rep, fold, mtrial, state)
                        if rep ==0 and fold == 0 and mtrial == 0 and state == 0:
                            M_ar = np.load(nameM).flatten()
                            label_ar = [state]
                        else:
                            M_ar = np.vstack((M_ar, np.load(nameM).flatten()))
                            label_ar.append(state)
label_ar = np.array(label_ar)

ratios=[0,0.2,0.4,0.6,0.8,1]
c_vec = np.power(np.zeros(15)+10,np.arange(7,-8,-1))

accuracy = np.zeros((p1-p0,ntests))
precision = np.zeros((p1-p0,ntests))
global_accuracy = np.zeros((p1-p0,np.size(np.array(ratios)),np.size(c_vec)))
global_precision = np.zeros((p1-p0,np.size(np.array(ratios)),np.size(c_vec)))
desv_global_accuracy = np.zeros((p1-p0,np.size(np.array(ratios)),np.size(c_vec)))
desv_global_precision = np.zeros((p1-p0,np.size(np.array(ratios)),np.size(c_vec)))
cm = []
cm2 =[]
Nel =1
for channels in options:
    for order in range(p0, p1):
        counter = 0
        for c in c_vec:
            for e in range(np.size(ratios)):
                for rep in range(nrep):
                    for fold in range(nfoldings):
                        X_train = exclude_kth_fold(M_ar[rep * nfoldings * txfolding * nstates:(rep + 1) * nfoldings * txfolding * nstates], nfoldings, fold)
                        Y_train = exclude_kth_fold(label_ar[rep * nfoldings * txfolding * nstates:(rep + 1) * nfoldings * txfolding * nstates], nfoldings, fold)
                        X_test = get_kth_fold(M_ar[rep * nfoldings * txfolding * nstates:(rep + 1) * nfoldings * txfolding * nstates], nfoldings, fold)
                        Y_test = get_kth_fold(label_ar[rep * nfoldings * txfolding * nstates:(rep + 1) * nfoldings * txfolding * nstates], nfoldings, fold)
                        
                        model = LogisticRegression(penalty='elasticnet', l1_ratio=ratios[e], C=c, solver='saga', max_iter=5000)
                        model.fit(X_train, Y_train)
                        
                        Y_pred = model.predict(X_test)
                        accuracy[order - p0][rep * nfoldings + fold] = accuracy_score(Y_test, Y_pred)
                        
                        if rep == 0:
                            cm = [confusion_matrix(Y_test, Y_pred, labels=model.classes_)]
                        else:
                            cm = np.vstack((cm, [confusion_matrix(Y_test, Y_pred, labels=model.classes_)]))

                        Y_pred = model.predict(X_train)
                        precision[order - p0][rep * nfoldings + fold] = accuracy_score(Y_train, Y_pred)

                        if rep == 0:
                            cm2 = [confusion_matrix(Y_train, Y_pred, labels=model.classes_)]
                        else:
                            cm2 = np.vstack((cm2, [confusion_matrix(Y_train, Y_pred, labels=model.classes_)]))

                print(c)
                print(ratios[e])
                print(accuracy[order - p0])
                print(precision[order - p0])

                global_accuracy[order - p0][e][counter] = np.mean(accuracy[order - p0])
                global_precision[order - p0][e][counter] = np.mean(precision[order - p0])
                desv_global_accuracy[order - p0][e][counter] = np.std(accuracy[order - p0])
                desv_global_precision[order - p0][e][counter] = np.std(precision[order - p0])
                
            counter += 1
np.save('VARgrid_accuracy_order'+str(order)+'50L10_5statesvf.npy',global_accuracy)
np.save('VARgrid_precision_order'+str(order)+'50L10_5statesvf.npy',global_precision)
np.save('VARgrid_desvaccuracy_order'+str(order)+'50L10_5statesvf.npy',desv_global_accuracy)
np.save('VARgrid_desvprecion_order'+str(order)+'50L10_5statesvf.npy',desv_global_precision)


#figure------
cx,cy=np.meshgrid(ratios,c_vec)
cx,cy=np.meshgrid(ratios,c_vec)
for order in range(p0,p1):
    figure, axis = plt.subplots(1, 2, figsize=(16,9)) 
    scatter1 = axis[0].scatter(cx,cy, c=global_precision[order-p0], cmap='viridis')
    axis[0].semilogy()
    axis[0].set_xlabel('L1 ratio')
    axis[0].set_ylabel('Regularization Constant')
    axis[0].set_title('ElasticNet on Trainingset AR | Order '+str(order))
    axis[0].set_xticks([0,0.2,0.4,0.6,0.8,1],['L2','0.2','0.4','0.6','0.8','L1'])
    figure.colorbar(scatter1, ax=axis[0], orientation='vertical', label='Precision')

    scatter2 = axis[1].scatter(cx,cy, c=global_accuracy[order-p0], cmap='viridis')
    axis[1].semilogy()
    axis[1].set_xlabel('L1 ratio')
    axis[1].set_ylabel('Regularization Constant')
    axis[1].set_title('ElasticNet on Testset AR | Order '+str(order))
    axis[1].set_xticks([0,0.2,0.4,0.6,0.8,1],['L2','0.2','0.4','0.6','0.8','L1'])
    figure.colorbar(scatter2, ax=axis[1], orientation='vertical', label='Accuracy')
    figure.savefig('Results/VARgridsearch_order'+str(order)+'vf.jpeg',bbox_inches='tight', dpi =300)
    plt.show()

cm = []
cm2 =[]
Nel =1
c = 1
tipus = 'l2'
obj_features =[1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80]
size_rfe=np.size(obj_features)

for channels in options:
    for order in range(p0, p1):
        # Initialize arrays to store global metrics
        global_accuracy = np.zeros(size_rfe)
        global_precision = np.zeros(size_rfe)
        desv_global_accuracy = np.zeros(size_rfe)
        desv_global_precision = np.zeros(size_rfe)

        for aimed_features in range(size_rfe):
            accuracy = np.zeros(ntests)
            precision = np.zeros(ntests)

            for rep in range(nrep):
                for fold in range(nfoldings):
                    X_train = exclude_kth_fold(M_ar[rep * nfoldings * txfolding * nstates:(rep + 1) * nfoldings * txfolding * nstates], nfoldings, fold)
                    Y_train = exclude_kth_fold(label_ar[rep * nfoldings * txfolding * nstates:(rep + 1) * nfoldings * txfolding * nstates], nfoldings, fold)
                    X_test = get_kth_fold(M_ar[rep * nfoldings * txfolding * nstates:(rep + 1) * nfoldings * txfolding * nstates], nfoldings, fold)
                    Y_test = get_kth_fold(label_ar[rep * nfoldings * txfolding * nstates:(rep + 1) * nfoldings * txfolding * nstates], nfoldings, fold)

                    rfe = RFE(estimator=LogisticRegression(penalty=tipus, C=c, solver='saga', max_iter=5000), n_features_to_select=obj_features[aimed_features])
                    model = LogisticRegression(penalty=tipus, C=c, solver='saga', max_iter=5000)
                    pipeline = Pipeline(steps=[('s', rfe), ('m', model)])
                    pipeline.fit(X_train, Y_train)

                    Y_pred = pipeline.predict(X_test)
                    accuracy[rep * nfoldings + fold] = accuracy_score(Y_test, Y_pred)
                    Y_pred = pipeline.predict(X_train)
                    precision[rep * nfoldings + fold] = accuracy_score(Y_train, Y_pred)

            global_accuracy[aimed_features] = np.mean(accuracy)
            global_precision[aimed_features] = np.mean(precision)
            desv_global_accuracy[aimed_features] = np.std(accuracy)
            desv_global_precision[aimed_features] = np.std(precision)

        np.save('VARrfe_accuracy_order' + str(order) + '50L10_5statesrepvf.npy', global_accuracy)
        np.save('VARrfe_precision_order' + str(order) + '50L10_5statesrepvf.npy', global_precision)
        np.save('VARrfe_desvaccuracy_order' + str(order) + '50L10_5statesrepvf.npy', desv_global_accuracy)
        np.save('VARrfe_desvprecion_order' + str(order) + '50L10_5statesrepvf.npy', desv_global_precision)
        
        
figure, axis = plt.subplots(1, 1, figsize=(4,3))
axis.errorbar(obj_features,global_accuracy, yerr=desv_global_accuracy,fmt = 'o',capsize=3, label='TestSet')
axis.errorbar(obj_features,global_precision, yerr=desv_global_precision,fmt = 'o',capsize=3, label='TrainSet')
axis.plot([1,90],[0.2,0.2], ls='dashed')
axis.semilogx()
axis.set_xlabel('Number of Features')
axis.set_ylabel('Accuracy')
axis.set_title('RFE VAR('+str(order)+')')
figure.legend(loc='center left', bbox_to_anchor=(1, 0.5))
figure.savefig('Results/VARRFE_5states_order'+str(order)+'50L10repvf.jpeg',dpi = 300,bbox_inches='tight')
